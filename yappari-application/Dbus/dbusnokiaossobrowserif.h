/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c DBusNokiaOssoBrowserIf -p dbusnokiaossobrowserif.h:dbusnokiaossobrowserif.cpp com.nokia.osso_browser.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSNOKIAOSSOBROWSERIF_H_1396374440
#define DBUSNOKIAOSSOBROWSERIF_H_1396374440

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.nokia.osso_browser
 */
class DBusNokiaOssoBrowserIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.osso_browser"; }

public:
    DBusNokiaOssoBrowserIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusNokiaOssoBrowserIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> load_url(const QString &uri, bool fullscreen)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri) << qVariantFromValue(fullscreen);
        return asyncCallWithArgumentList(QLatin1String("load_url"), argumentList);
    }

    inline QDBusPendingReply<> load_url(const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("load_url"), argumentList);
    }

    inline QDBusPendingReply<> mime_open(const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("mime_open"), argumentList);
    }

    inline QDBusPendingReply<> open_new_window(const QString &uri, bool fullscreen)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri) << qVariantFromValue(fullscreen);
        return asyncCallWithArgumentList(QLatin1String("open_new_window"), argumentList);
    }

    inline QDBusPendingReply<> open_new_window(const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("open_new_window"), argumentList);
    }

    inline QDBusPendingReply<> switchboard_launch_microb(const QString &uri)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri);
        return asyncCallWithArgumentList(QLatin1String("switchboard_launch_microb"), argumentList);
    }

    inline QDBusPendingReply<> top_application()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("top_application"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace nokia {
    typedef ::DBusNokiaOssoBrowserIf osso_browser;
  }
}
#endif
